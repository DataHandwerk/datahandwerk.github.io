site:
  title: DataHandwerk Docs
  url: https://DataHandwerk.github.io
  start_page: dhw::index.adoc
  # start_page: dhw:sqldb:nav/objects-by-schema.adoc
  # start_page: dhw:arc:architecture.adoc
  keys:
    google_analytics: 'G-L4RM6Q8D27'
content:
  sources:
  - url: D:\Repos\GitHub\DataHandwerk\DataHandwerk-docs
    branches: HEAD
    start_path: docs
  - url: D:\Repos\GitHub\DataHandwerk\dhw-antora-sqldb
    branches: HEAD
    start_path: docs
  # - url: https://github.com/DataHandwerk/DataHandwerk-docs
  #   branches: main
  #   start_path: docs
asciidoc:
  attributes:
    page-pagination: ''
    experimental: ''
    :plantuml-server-url: http://www.plantuml.com/plantuml
    # You can use the kroki-fetch-diagram option to download the images from Kroki at build time. In other words, while viewing pages you won't rely on Kroki anymore.
    # However, in Antora, this is not currently compatible with inline SVG images.
    kroki-fetch-diagram: true
    # required for interactive diagram, but it is good idea in general
    kroki-default-format: svg
    # Allow URI read to retrieve SVG on compilation
    # nur nötig für interaktive Grafiken
    allow-uri-read: true
    # use SVG unless otherwise specified
    # Make SVG inline so that we can get interactive (can be overridden by schema with "opts=none")
    # Das Problem dabei: sie sind dann wirklich inline, meistens zu groß,
    # und man kann sie nicht mehr in einem separaten Fenster öffnen, um sie vollständig zu sehen
    # das wäre also nur sinnvoll, wenn sichergestellt wird, dass das Diagramm nicht zu groß ist.
    #kroki-default-options: inline
  extensions:
  - asciidoctor-kroki
ui:
  bundle:
    url: https://gitlab.com/antora/antora-ui-default/-/jobs/artifacts/master/raw/build/ui-bundle.zip?job=bundle-stable
    snapshot: true
  supplemental_files: ./supplemental-ui
  # - path: ui.yml
  #   contents: |
  #     static_files: [ .nojekyll ]
  # - path: .nojekyll
output:
  clean: true
  dir: ./public
  # destinations:
  # - provider: archive
  #   path: ./public/blue.zip
urls:
  latest_version_segment: current
  # no redirects will be created in combination with redirect_facility: static
  # but this could be useful if the site would be published on netlify or gitlab
  # but the required redirect logic is not supported on github
  # 'redirect:to' will create 'current' instead of the latest version
  # this would allow static link to the latest version, also on github
  # but it will not work for renamed, added, deleted pages
  latest_version_segment_strategy: redirect:to
  #  latest_version_segment_strategy: replace
  # latest_prerelease_version_segment: unstable
  # # static is default
  # 'redirect_facility: static' doesn't work for the latest version, no static pages are created
  # a hoster like netlify would be required, then the value could be netlify
  redirect_facility: netlify
runtime:
  fetch: true
